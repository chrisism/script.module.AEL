trigger:
- main
- release/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMaster: or(${{eq(variables['Build.SourceBranch'], 'refs/heads/master')}},${{eq(variables['Build.SourceBranch'], 'refs/heads/main')}})
  isReleaseCandidate: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')}}
  isHotfix: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')}}
  isDev: ${{eq(variables['Build.SourceBranch'], 'refs/heads/dev')}}
  workingDirectory: '$(Build.SourcesDirectory)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: build
      displayName: build
        
      steps:
      - task: gitversion/setup@0
        displayName: 'Install GitTools'
        inputs:
          versionSpec: '5.3.x'

      - task: gitversion/execute@0
        displayName: 'Executing gitversion'

      - script: |
            echo '##vso[task.setvariable variable=packageVersion]$(GitVersion.NuGetVersionV2)
            echo '##vso[task.setvariable variable=projectVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
        displayName: 'Setting version variables'
        condition: not(or(${{variables.isMaster}}, ${{variables.isDev}}, ${{variables.isReleaseCandidate}}, ${{variables.isHotfix}}))
        
      - script: |
            echo '##vso[task.setvariable variable=packageVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
            echo '##vso[task.setvariable variable=projectVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
        displayName: 'Setting version variables'
        condition: or(${{variables.isMaster}}, ${{variables.isDev}}, ${{variables.isReleaseCandidate}}, ${{variables.isHotfix}})

      - task: RegExMatchReplace@2
        displayName: 'Set addon version'
        inputs:
          PathToFile: 'addon.xml'
          RegEx: 'version="\d+\.\d+\.\d+.*" provider'
          ValueToReplace: 'version="$(packageVersion)" provider'
          
      - task: CopyFiles@2
        displayName: 'Copy addon files'
        inputs:
          SourceFolder: ''
          Contents: |
              *.md
              *.xml
              lib/**/*.*
              media/**/*.*
          TargetFolder: '$(build.artifactstagingdirectory)/script.module.akl/'
          CleanTargetFolder: true
          flattenFolders: false

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(build.artifactstagingdirectory)/script.module.akl'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(build.artifactstagingdirectory)/package/script.module.akl-$(packageVersion).zip'
          replaceExistingArchive: true

      - script: md5sum script.module.akl-$(packageVersion).zip > script.module.akl-$(packageVersion).md5
        workingDirectory: $(build.artifactstagingdirectory)/package/
        displayName: 'Creating md5 file'

      - task: PublishBuildArtifacts@1
        displayName: 'Publishing application as artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)/package/'
          ArtifactName: 'script.module.akl'
          publishLocation: 'Container'
     
- stage: DeployProd
  displayName: Deployment on Production
  condition: eq(${{variables.isMaster}}, true)
  jobs:
    - deployment: Production
      environment: 
        name: Production

      #variables:

      strategy:     
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Downloading Application artifact'
              artifact: 'script.module.akl'

          - task: GitClone@2
            inputs:
              RepositoryURL: 'https://github.com/chrisism/repository.chrisism.git'
              RepositoryPath: '$(Pipeline.Workspace)/repository/'
              Branch: 'master'
              FallbackBranch: 'master'
              BaseBranch: 'master'
              Clean: true
